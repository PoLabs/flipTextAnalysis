% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sentiment.R
\name{TagSentiment}
\alias{TagSentiment}
\title{\code{TagSentiment}}
\usage{
TagSentiment(tokens, pos.words = get("ftaPositiveWords"),
  neg.words = get("ftaNegativeWords"), check.simple.suffixes = FALSE,
  simple.suffixes = c("s", "es", "ed", "d", "ing"))
}
\arguments{
\item{tokens}{A character vector containing the tokens to tag.}

\item{pos.words}{A character vector containing the dictionary of positive words.}

\item{neg.words}{A character vector containing the dictionary of negative words.}

\item{check.simple.suffixes}{If true, whevenver a token is not found in
pos.words AND neg.words, the algorithm will attempt to trim suffixes
from the word and check the dictionaries again. This is to account for
cases where the dictionaries do not contain variants of sentiment words
(plurals, past tenses, etc). The suffixes to check are specified in the
next argument.}

\item{simple.suffixes}{An array of strings containing suffixes to strip when checking
for words among the positive and negative word lists.}
}
\value{
A character vector with the same length as \code{tokens} which has entries
         \code{[pos]} for postive words, \code{[neg]} for negative words, and
         \code{[neu]} for neutral words (i.e. not found in either dictionary.)
}
\description{
Identify words as positive, negative, or neutral.
}
\details{
This function does not handle negation, but only looks for each token with
the two dictionaries. Negation can be handled later by looking at the context of each
token in the original text, as done by \code{\link{ScoreSentimentForString}}.
}
\examples{
TagSentiment(c("great","happy","the", "of", "bad", "terrible"))
}
